/**
  ******************************************************************************
  * 文件名 ：   SX126X_Driver.c
  * 作者   ：   LSD RF Team
  * 版本   ：   V1.0.0
  * 时间   ：   15-Aug-2018
  * 文件描述：
  *     该文件为SX126X模块的驱动层，包含对SX126X模块的工作模式控制，FIFO操作，发
  *射功率、频率等设置，以及一些数据处理的公共函数
  *    客户在使用SX126X模块时候需要移植该文件，如果SX126X_HAL.c中各个函数功能都已
  *实现且函数名等都没有改动，那本文件可以不用做更改直接使用，客户在应用层直接调
  *用本文件函数就可以实现各种操作。
*******************************************************************************/
#include "SX126X_Driver.h"
#include "stm32l4xx_hal.h"
#include "timer.h"
static RadioPacketTypes_t PacketType;


S_LoRaConfig G_LoRaConfig = {
    470000000,
    LORA_BW_125,
    LORA_SF7,
    LORA_CR_4_5,
    22,
    LORA_PACKET_EXPLICIT,
    LORA_CRC_ON,
	  LORA_IQ_NORMAL,
			8,
     64,
};

S_LoRaPara G_LoRaPara;

static RadioOperatingModes_t OperatingMode;
/*
  注意，本文件的函数实现了从RF的驱动与MCU的兼容

*/
/**
  * @简介：
  * @参数：无
  * @返回值：无
  */
void SX126xWakeup( void )
{
//    BoardDisableIrq( );
    SX126X_NSS_OUTPUT(GPIO_PIN_RESET);
    SX126X_ReadWriteByte( RADIO_GET_STATUS );
    SX126X_ReadWriteByte( 0x00 );
    SX126X_NSS_OUTPUT(GPIO_PIN_SET);
    // Wait for chip to be ready.
    SX126xWaitOnBusy( );
//    BoardEnableIrq( );
}
/**
  * @简介：
  * @参数：无
  * @返回值：无
  */
RadioOperatingModes_t SX126xGetOperatingMode( void )
{
    return OperatingMode;
}
/**
  * @简介：
  * @参数：无
  * @返回值：无
  */
void SX126xCheckDeviceReady( void )
{
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
    {
        SX126xWakeup( );
        // Switch is turned off when device is in sleep mode and turned on is all other modes
        //SX126xAntSwOn( );
    }
    SX126xWaitOnBusy( );
}
/**
  * @简介：
  * @参数：无
  * @返回值：无
  */
void SX126xWriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
    SX126xCheckDeviceReady( );

    SX126X_NSS_OUTPUT(GPIO_PIN_RESET);
    SX126X_ReadWriteByte(( uint8_t )command);
    for( uint16_t i = 0; i < size; i++ )
    {
        SX126X_ReadWriteByte(buffer[i]);
    }
    SX126X_NSS_OUTPUT(GPIO_PIN_SET);
    if( command != RADIO_SET_SLEEP )
    {
        SX126xWaitOnBusy( );
    }
}
/**
  * @简介：
  * @参数：无
  * @返回值：无
  */
void SX126xReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{

    SX126xCheckDeviceReady( );
    SX126X_NSS_OUTPUT(GPIO_PIN_RESET);
    SX126X_ReadWriteByte(( uint8_t )command);
    SX126X_ReadWriteByte(0);
    for( uint16_t i = 0; i < size; i++ )
    {
        buffer[i] = SX126X_ReadWriteByte(0x00);
    }
    SX126X_NSS_OUTPUT(GPIO_PIN_SET);
    SX126xWaitOnBusy( );
}
/**
  * @简介：
  * @参数：无
  * @返回值：无
  */
void SX126xWriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
    SX126xCheckDeviceReady( );
    SX126X_NSS_OUTPUT(GPIO_PIN_RESET);
    SX126X_ReadWriteByte(RADIO_WRITE_REGISTER);
    SX126X_ReadWriteByte((address & 0xFF00 ) >> 8);
    SX126X_ReadWriteByte( address & 0x00FF );
    for( uint16_t i = 0; i < size; i++ )
    {
        SX126X_ReadWriteByte( buffer[i] );
    }
    SX126X_NSS_OUTPUT(GPIO_PIN_SET);
    SX126xWaitOnBusy( );
}
/**
  * @简介：
  * @参数：无
  * @返回值：无
  */
void SX126xWriteRegister( uint16_t address, uint8_t value )
{
    SX126xWriteRegisters( address, &value, 1 );
}
/**
  * @简介：
  * @参数：无
  * @返回值：无
  */
void SX126xReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
    SX126xCheckDeviceReady( );

    SX126X_NSS_OUTPUT(GPIO_PIN_RESET);
    SX126X_ReadWriteByte(RADIO_READ_REGISTER );
    SX126X_ReadWriteByte((address & 0xFF00 ) >> 8);
    SX126X_ReadWriteByte( address & 0x00FF );
    SX126X_ReadWriteByte(0);
    for( uint16_t i = 0; i < size; i++ )
    {
        buffer[i] = SX126X_ReadWriteByte(0x00);
    }
    SX126X_NSS_OUTPUT(GPIO_PIN_SET);
    SX126xWaitOnBusy( );
}
/**
  * @简介：
  * @参数：无
  * @返回值：无
  */
uint8_t SX126xReadRegister( uint16_t address )
{
    uint8_t data;
    SX126xReadRegisters( address, &data, 1 );
    return data;
}
/**
  * @简介：
  * @参数：无
  * @返回值：无
  */
void SX126xWriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
    SX126xCheckDeviceReady( );
    SX126X_NSS_OUTPUT(GPIO_PIN_RESET);
    SX126X_ReadWriteByte( RADIO_WRITE_BUFFER );
    SX126X_ReadWriteByte( offset );
    for( uint16_t i = 0; i < size; i++ )
    {
        SX126X_ReadWriteByte( buffer[i] );
    }
    SX126X_NSS_OUTPUT(GPIO_PIN_SET);
    SX126xWaitOnBusy( );
}
/**
  * @简介：
  * @参数：无
  * @返回值：无
  */
void SX126xReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
    SX126xCheckDeviceReady( );
    SX126X_NSS_OUTPUT(GPIO_PIN_RESET);
    SX126X_ReadWriteByte( RADIO_READ_BUFFER );
    SX126X_ReadWriteByte( offset );
    SX126X_ReadWriteByte(0);
    for( uint16_t i = 0; i < size; i++ )
    {
        buffer[i] = SX126X_ReadWriteByte(0x00);
    }
    SX126X_NSS_OUTPUT(GPIO_PIN_SET);
    SX126xWaitOnBusy( );
}
void SX126xWriteFifo( uint8_t *buffer, uint8_t size )
{
    SX126xWriteBuffer( 0, buffer, size );
}

void SX126xReadFifo( uint8_t *buffer, uint8_t size )
{
    SX126xReadBuffer( 0, buffer, size );
}


//-------------------------SX126X 基本设置-----------------------//
//该部分函数为对SX127X模块复位、发射功率、发射频率等参数设置，以
//及SX127X工作模式设置、数据包读写等
//--------------------------------------------------------------//

/**
  * @简介：SX126X  复位设置
  * @参数：无
  * @返回值：无
  */
void SX126X_Reset(void)
{
    HAL_Delay(10);
    SX126X_RESET_OUTPUT(GPIO_PIN_RESET);
    HAL_Delay(20);
    SX126X_RESET_OUTPUT(GPIO_PIN_SET);
    HAL_Delay(10);
}
/**
  * @简介：SX126X  IO初始化及配置
  * @参数：无
  * @返回值：无
  */
void SX126X_InitIo(void)
{
    SX126X_DIO1_INPUT();
    SX126X_DIO2_INPUT();
    SX126X_Busy_INPUT();
    SX126X_SPIGPIO_Init();
    SX126X_RESET_OUTPUT(GPIO_PIN_SET);
    SX126X_SWCTL1_OUTPUT(GPIO_PIN_RESET);
    SX126X_SWCTL2_OUTPUT(GPIO_PIN_RESET);
}
/**
  * @简介：SX127X  TX/RX的PA切换
  * @参数：bool txEnable  切换逻辑；真：作为TX。假：作为RX   为硬件两个PA控制IO口
  * @返回值:无
  */
void SX126XWriteRxTx( bool txEnable )
{
    if( txEnable != 0 )       //如果为真，为TX
    {
        SX126X_SWCTL1_OUTPUT(GPIO_PIN_RESET);
        SX126X_SWCTL2_OUTPUT(GPIO_PIN_SET);
    }
    else  //为假，为RX
    {
        SX126X_SWCTL1_OUTPUT(GPIO_PIN_SET);
        SX126X_SWCTL2_OUTPUT(GPIO_PIN_RESET);
    }
}
/**
  * @简介：DIO1中断开启使能
  * @参数：无
  * @返回值：无
  */
void DIO1_EnableInterrupt(void)
{
    SX126X_DIO1_INTENABLE();
}
/**
  * @简介：DIO0中断关闭使能
  * @参数：无
  * @返回值：无
  */
void DIO1_DisableInterrupt(void)
{
    SX126X_DIO1_INTDISABLE();
}
/**
  * @简介：DIO1引脚状态获取
  * @参数：无
  * @返回值：State表示DIO1获取的电平，高电平"1",低电平"0"
  */
GPIO_PinState DIO1_GetState(void)
{
    GPIO_PinState State;
    State = SX126X_DIO1_GetState();
    return State;
}
/**
  * @简介：DIO2中断开启使能
  * @参数：无
  * @返回值：无
  */
void DIO2_EnableInterrupt(void)
{
    SX126X_DIO2_INTENABLE();
}
/**
  * @简介：DIO2中断关闭使能
  * @参数：无
  * @返回值：无
  */
void DIO2_DisableInterrupt(void)
{
    SX126X_DIO2_INTDISABLE();
}
/**
  * @简介：DIO2引脚状态获取
  * @参数：无
  * @返回值：State表示DIO2获取的电平，高电平"1",低电平"0"
  */
GPIO_PinState DIO2_GetState(void)
{
    GPIO_PinState State;
    State = SX126X_DIO1_GetState();
    return State;
}
/**
  * @简介：Busy中断开启使能
  * @参数：无
  * @返回值：无
  */
void Busy_EnableInterrupt(void)
{
    SX126X_Busy_INTENABLE();
}
/**
  * @简介：Busy中断关闭使能
  * @参数：无
  * @返回值：无
  */
void Busy_DisableInterrupt(void)
{
    SX126X_Busy_INTDISABLE();
}
/**
  * @简介：Busy引脚状态获取
  * @参数：无
  * @返回值：State表示Busy获取的电平，高电平"1",低电平"0"
  */
GPIO_PinState Busy_GetState(void)
{
    GPIO_PinState State;
    State = SX126X_Busy_GetState();
    return State;
}
/**
  * @简介：Standby模式
  * @参数：STDBY_RC or STDBY_XOSC
  * @返回值：无
*/
void SX126xSetStandby( RadioStandbyModes_t standbyConfig )
{
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
    if( standbyConfig == STDBY_RC )
    {
        OperatingMode = MODE_STDBY_RC;
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
/**
  * @简介：
  * @参数：
  * @返回值：无
*/
void SX126xSetRegulatorMode( RadioRegulatorMode_t mode )
{
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
}
/**
  * @简介：
  * @参数：
  * @返回值：无
*/
void SX126xSetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
    uint8_t buf[2];

    buf[0] = txBaseAddress;
    buf[1] = rxBaseAddress;
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
}
/**
  * @简介：
  * @参数：
  * @返回值：无
*/
void SX126xCalibrateImage( uint32_t freq )
{
    uint8_t calFreq[2];

    if( freq > 900000000 )
    {
        calFreq[0] = 0xE1;
        calFreq[1] = 0xE9;
    }
    else if( freq > 850000000 )
    {
        calFreq[0] = 0xD7;
        calFreq[1] = 0xD8;
    }
    else if( freq > 770000000 )
    {
        calFreq[0] = 0xC1;
        calFreq[1] = 0xC5;
    }
    else if( freq > 460000000 )
    {
        calFreq[0] = 0x75;
        calFreq[1] = 0x81;
    }
    else if( freq > 425000000 )
    {
        calFreq[0] = 0x6B;
        calFreq[1] = 0x6F;
    }
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
}
/**
  * @简介:频率设置
  * @参数：
  * @返回值：无
*/
tSX126xError SX126xSetRfFrequency(uint32_t frequency )
{
    if((G_LoRaConfig.LoRa_Freq > 920000000) || (G_LoRaConfig.LoRa_Freq < 430000000))
        return PARAMETER_INVALID;
    uint8_t buf[4];
    uint32_t freq = 0;
    SX126xSetStandby( STDBY_RC );
    SX126xCalibrateImage( G_LoRaConfig.LoRa_Freq );
    freq = ( uint32_t )( ( double )G_LoRaConfig.LoRa_Freq / ( double )FREQ_STEP );
    buf[0] = ( uint8_t )( ( freq >> 24 ) & 0xFF );
    buf[1] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
    buf[2] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
    buf[3] = ( uint8_t )( freq & 0xFF );
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4);
}
/**
  * @简介:
  * @参数：
  * @返回值：无
*/
void SX126xSetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
    uint8_t buf[8];
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
}

/**
  * @简介:
  * @参数：
  * @返回值：无
*/
void SX126xSetPacketType( RadioPacketTypes_t packetType )
{
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;

    if( packetType == PACKET_TYPE_GFSK )
    {
        SX126xWriteRegister( REG_BIT_SYNC, 0x00 );
    }
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
}
/**
  * @简介:
  * @参数：
  * @返回值：无
*/
void SX126xSetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
    uint8_t buf[4];

    buf[0] = paDutyCycle;
    buf[1] = hpMax;
    buf[2] = deviceSel;
    buf[3] = paLut;
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
}

//SX1268 17dBm 版本
/**
  * @简介：
  * @参数：无
  * @返回值:
  */
void SX126xSetTxParams( int8_t power, RadioRampTimes_t rampTime )
{
    uint8_t buf[2];
    if( power > 22 )
    {
        power = 22;
    }
    else if( power < -3 )
    {
        power = -3;
    }
    if(power <= 17)
    {
        power = power + 5;
        SX126xSetPaConfig( 0x02, 0x03, 0x00, 0x01 );//0~17dBm
    }
    else
    {
        SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );//17~dBm
    }

    SX126xWriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
    buf[0] = power;
    buf[1] = ( uint8_t )rampTime;
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
}

/**
  * @简介:
  * @参数：
  * @返回值：无
*/
void SX126xSetRfTxPower( int8_t power )
{
    SX126xSetTxParams( power, RADIO_RAMP_40_US );
}

/**
  * @简介:
  * @参数：
  * @返回值：无
*/
void SX126xSetLoraModulationParams( )
{
    uint8_t n;

    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00};
    n = 4;
    buf[0] = G_LoRaConfig.SpreadingFactor;
    buf[1] = G_LoRaConfig.BandWidth;
    buf[2] =  G_LoRaConfig.CodingRate;

    if( ( ( G_LoRaConfig.BandWidth == LORA_BW_125 ) && ( ( G_LoRaConfig.SpreadingFactor == LORA_SF11 ) || ( G_LoRaConfig.SpreadingFactor == LORA_SF12 ) ) ) ||
            ( (G_LoRaConfig.BandWidth == LORA_BW_250 ) && ( G_LoRaConfig.SpreadingFactor == LORA_SF12 ) ) )
    {
        buf[3] = LOWDATARATEOPTIMIZE_ON;
    }
    else
    {
        buf[3] = LOWDATARATEOPTIMIZE_OFF;
    }

    SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
}
/**
  * @简介:
  * @参数：
  * @返回值：无
*/
void SX126xSetLoraPacketParams( )
{  
	  SX126xSetPacketType( PACKET_TYPE_LORA );
    uint8_t n;
    uint8_t crcVal = 0;
    uint8_t buf[6] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

        n = 6;
        buf[0] = (G_LoRaConfig.PreambleLength>> 8 ) & 0xFF;
        buf[1] = G_LoRaConfig.PreambleLength;
        buf[2] = G_LoRaConfig.HeaderType;
        buf[3] = G_LoRaConfig.PayloadLength;
        buf[4] = G_LoRaConfig.CrcMode;
        buf[5] = G_LoRaConfig.InvertIQ;
        SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
}

/**
  * @简介：SX126X 配置频率检查判断
  * @参数：无
  * @返回值：true or false
  */
bool LoRaConfig_Check(void)
{


}
/**
* @简介:SX126X初始化
  * @参数：无
  * @返回值：tSX127xError   错误枚举内容
  */
tSX126xError SX126x_Lora_init(void)
{
    if(false == LoRaConfig_Check()) //如果输入参数错误
    {
        return PARAMETER_INVALID;  //报错输入
    }
    SX126X_InitIo();                // PAIO口初始化
    SX126X_Reset();                 //复位RF
    SX126X_SPI_Init();              //SPI初始化
    SX126xSetStandby(STDBY_RC);    //切换到LoRamode，standby状态

    /*------------------------------------------------
    SPI 验证                   */
    uint8_t test = 0;
    SX126xWriteRegister( REG_LR_PAYLOADLENGTH, 0x09);   //选一个用不到的寄存器来做验证
    test = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
    if(test != 0x09)
        return SPI_READCHECK_WRONG;

    SX126xSetRegulatorMode( USE_DCDC );
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
    SX126xSetRfFrequency(G_LoRaConfig.LoRa_Freq);
    //SX126xSetTxParams( G_LoRaConfig.PowerCfig, RADIO_RAMP_40_US );
    SX126xSetRfTxPower( G_LoRaConfig.PowerCfig );
    SX126xSetLoraModulationParams( );
		SX126xSetLoraPacketParams( );
    SX126xWriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
    return NORMAL;
}
/**
  * @简介:
  * @参数：
  * @返回值：无
*/
void SX126xClearIrqStatus( uint16_t irq )
{
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}
/**
  * @简介:
  * @参数：
  * @返回值：无
*/
uint16_t SX126xGetIrqStatus( void )
{
    uint8_t irqStatus[2];

    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}
/**
  * @简介:
  * @参数：
  * @返回值：无
*/
void SX126xSetDio2AsRfSwitchCtrl( uint8_t enable )
{
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
}
/**
  * @简介:
  * @参数：
  * @返回值：无
*/
int8_t SX126xGetRssiInst( void )
{
    uint8_t buf[1];
    int8_t rssi = 0;

    SX126xReadCommand( RADIO_GET_RSSIINST, buf, 1 );
    rssi = -buf[0] >> 1;
    return rssi;
}
/**
  * @简介:
  * @参数：
  * @返回值：无
*/
void SX126xGetRxBufferStatus( uint8_t payloadLength )  //, uint8_t *rxStartBufferPointer
{
    uint8_t status[2];

    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SX126xReadRegister( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
    {
        payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
    }
    else
    {
        payloadLength = status[0];
    }
   // *rxStartBufferPointer = status[1];
}
/**
  * @简介:
  * @参数：
  * @返回值：无
*/
void SX126xGetPacketStatus( S_LoRaPara *pktStatus )
{
    uint8_t status[3];

    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );

            pktStatus->AvgPacket_RSSI = -status[0] >> 1;
            ( status[1] < 128 ) ? ( pktStatus->Packet_SNR = status[1] >> 2 ) : ( pktStatus->Packet_SNR = ( ( status[1] - 256 ) >> 2 ) );
            pktStatus->LastPacket_RSSI = -status[2] >> 1;
}

/**
  * @简介:
  * @参数：
  * @返回值：无
*/
void SX126xSetTx( uint32_t timeout )
{
    uint8_t buf[3];
	  SX126xClearIrqStatus( IRQ_RADIO_ALL );
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
    buf[2] = ( uint8_t )( timeout & 0xFF );
    
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
}
/**
  * @简介:
  * @参数：
  * @返回值：无
*/
void SX126xSetRx( uint32_t timeout )
{
    uint8_t buf[3];
	  SX126xClearIrqStatus( IRQ_RADIO_ALL );
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
    buf[2] = ( uint8_t )( timeout & 0xFF );
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
}

/**
  * @简介:
  * @参数：
  * @返回值：无
*/
void SX126xSendPayload( uint8_t *payload, uint8_t size, uint32_t timeout )
{
    SX126xWriteBuffer( 0x00, payload, size );
    SX126xSetTx( timeout );
}
/**
  * @简介:
  * @参数：
  * @返回值：无
*/
void SX126X_TxPacket( uint8_t*data )
{
    SX126XWriteRxTx(true);
    SX126xSetDioIrqParams( IRQ_TX_DONE ,
                           IRQ_TX_DONE ,
                           IRQ_RADIO_NONE,
                           IRQ_RADIO_NONE );
	
    SX126xSetLoraPacketParams( );
	  SX126xSetBufferBaseAddress( 0x00, 0x00 );
	  SX126xClearIrqStatus( IRQ_RADIO_ALL );
    SX126xSendPayload( data, G_LoRaConfig.PayloadLength, 0xffffff );
}

/**
  * @简介:
  * @参数：
  * @返回值：无
*/
void SX126X_StartRx( void )
{
    SX126xSetStandby(STDBY_RC);
    SX126XWriteRxTx(false);
    SX126xSetDioIrqParams( IRQ_RX_DONE, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
                           IRQ_RX_DONE, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
                           IRQ_RADIO_NONE,
                           IRQ_RADIO_NONE );
		SX126xSetLoraPacketParams( );
	  SX126xSetBufferBaseAddress( 0x00, 0x00 );
	  SX126xClearIrqStatus( IRQ_RADIO_ALL );
    SX126xSetRx( 0xffffff ); // Rx Continuou
}
/**
  * @简介:
  * @参数：
  * @返回值：无
*/
uint8_t SX126xGetPayload( uint8_t *buffer, uint8_t *size)
{
    SX126xReadBuffer( 0x00, buffer, *size );
}

/**
  * @简介：RF接收数据包
  * @参数：uint8_t*cbuf接收数组指针
  * @返回值：无
  */
void SX126X_RxPacket(uint8_t*cbuf)
{
	
     SX126xGetPacketStatus(&G_LoRaPara);//收到一包数据包后，返回SNR、RSSI等各种信息
    if( G_LoRaConfig.HeaderType == LORA_PACKET_EXPLICIT ) {
        //有头那么从寄存器中读，否则按照G_LoRaConfig设置长度读取FIFO
        SX126xGetRxBufferStatus(G_LoRaConfig.PayloadLength);
    }
		SX126xClearIrqStatus( IRQ_RADIO_ALL );
		SX126xGetPayload(cbuf, &G_LoRaConfig.PayloadLength);
		
}